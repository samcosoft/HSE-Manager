@typeparam TData
@using DevExpress.Data.Filtering
@using DevExpress.Data.Filtering.Helpers

@{
    var items = GetValueByFunctionOperator(FilterContext.FilterCriteria);
}
<DxTagBox @ref="TdxTag" TData="TData"
          TValue="string"
          Data="@DataSource"
          Values="items"
          ValuesChanged="newValues => { FilterContext.FilterCriteria = CreateFilterCriteriaByValues(newValues, FilterContext.DataColumn.FieldName); }" />

@code
{
    [Parameter] public GridDataColumnFilterRowCellTemplateContext FilterContext { get; set; } = null!;

    [Parameter]
    public IEnumerable<TData> DataSource { get; set; } = null!;
    [Parameter]
    public string? TextFieldName { get; set; }

    private DxTagBox<TData, string>? TdxTag { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (TdxTag!= null && string.IsNullOrEmpty(TextFieldName) == false)
        {
            TdxTag.TextFieldName = TextFieldName;
            TdxTag.ValueFieldName = TextFieldName;
        }
    }

    private IEnumerable<string>? GetValueByFunctionOperator(CriteriaOperator criteria)
    {
        var inOperatorOperand = criteria as InOperator;
        if (inOperatorOperand.ReferenceEqualsNull() || inOperatorOperand!.Operands.Any() == false)
            return null;
        return inOperatorOperand.Operands.OfType<OperandValue>().Select(r => r.Value?.ToString())!;
    }

    private CriteriaOperator? CreateFilterCriteriaByValues(IEnumerable<string> values, string fieldName)
    {
        var enumerable = values.ToList();
        return !enumerable.Any() ? null : new InOperator(fieldName, enumerable);
    }
}
