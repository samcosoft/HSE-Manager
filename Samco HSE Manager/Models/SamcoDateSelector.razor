@using System.Globalization
@using System.Reflection

<style>
    .calendarStyle .mud-input-control, .mud-input {
        margin-top: 0;
    }

    .calendarStyle .mud-input > input.mud-input-root-outlined.mud-input-root-adorned-end {
        padding: 10px 10px;
    }
</style>
<div class="d-flex gap-1">
    @{
        <div class="d-inline-flex w-100">
            <MudDatePicker @bind-Date="@Date" Label="@DisplayText"  PickerVariant="PickerVariant.Dialog" ShowToolbar="false" Rounded="true" Class="@(DisplayText == null ? "calendarStyle" : "")"
                           Culture="@GetPersianCulture()" IconSize="Size.Small" MinDate="@DateTime.Parse("1900/01/01")" Variant="Variant.Outlined"
                           Clearable="true"/>
        </div>
        <div class="d-inline-flex @(DisplayText == null ? "" : "pt-2")">
            <MudTooltip Text="@(_shamsiVisible ? "تقویم شمسی" : "تقویم میلادی")">
                <MudIconButton Color="Color.Primary" Size="Size.Small" Class="h-100" Icon="@GetIcon()" Variant="Variant.Filled" OnClick="() => ShamsiVisible = !ShamsiVisible"/>
            </MudTooltip>
        </div>
    }
</div>

@code
{
    private DateTime? _date;

    [Parameter]
    public DateTime? Date
    {
        get => _date!;
        set
        {
            if (_date == value) return;
            _date = value;
            DateChanged.InvokeAsync(value);
            if (value != null) DateNotNullChanged.InvokeAsync(value.Value);
        }
    }

    [Parameter]
    public EventCallback<DateTime?> DateChanged { get; set; }

    [Parameter]
    public DateTime DateNotNull
    {
        get => _date.GetValueOrDefault(DateTime.Today);
        set
        {
            if (_date == value || value == DateTime.MinValue) return;
            Date = value;
            DateNotNullChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<DateTime> DateNotNullChanged { get; set; }

    [Parameter]
    public string? NullText { get; set; }

    [Parameter]
    public string? DisplayText { get; set; }

    [Parameter]
    public CalendarType DefaultCalendar { get; set; }

    [Parameter]
    public Variant CalenderVariant { get; set; }

    public enum CalendarType
    {
        Persian,
        Gregorian
    }

    private bool _shamsiVisible;

    private bool ShamsiVisible
    {
        get => _shamsiVisible;
        set
        {
            _shamsiVisible = value;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _shamsiVisible = DefaultCalendar == CalendarType.Persian;
    }

    private string GetIcon()
    {
        return _shamsiVisible ? "fas fa-sun" : "fas fa-cross";
    }

    private CultureInfo GetPersianCulture()
    {
        if (!_shamsiVisible) return new CultureInfo("en-US");
        var culture = new CultureInfo("fa-IR");
        var formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { "ی", "د", "س", "چ", "پ", "ج", "ش" };
        formatInfo.DayNames = new[] { "یکشنبه", "دوشنبه", "سه شنبه", "چهار شنبه", "پنجشنبه", "جمعه", "شنبه" };
        var monthNames = new[]
        {
            "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن",
            "اسفند",
            ""
        };
        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = "ق.ظ";
        formatInfo.PMDesignator = "ب.ظ";
        formatInfo.ShortDatePattern = "yyyy/MM/dd";
        formatInfo.LongDatePattern = "dddd, dd MMMM,yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        Calendar cal = new PersianCalendar();
        var fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        var info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = "/";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }
}