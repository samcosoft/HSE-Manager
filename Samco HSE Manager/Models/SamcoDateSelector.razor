@using System.Globalization
@using System.Reflection
@*@typeparam TData*@

<style>
    .mud-input-control, .mud-input {
        margin-top: 0;
    }
</style>
<MudContainer>
    <div class="row align-items-center pb-2">
        <div class="col">
            @{
                if (_shamsiVisible)
                {
                    <MudDatePicker @bind-Date="@Date" Label="@DisplayText" DisableToolbar="true" Rounded="true"
                           Culture="@GetPersianCulture()" IconSize="Size.Small" MinDate="@DateTime.Parse("2000/01/01")" Variant="Variant.Outlined" />
                }
                else
                {
                    <MudDatePicker @bind-Date="@Date" Label="@DisplayText" DisableToolbar="true"
                           Rounded="true" IconSize="Size.Small" MinDate="@DateTime.Parse("2000/01/01")" Variant="Variant.Outlined" />
                }
            }
        </div>
        <div class="col-2">
            <div style="display: @(_shamsiVisible? "none":"block")">
                <MudButton Color="Color.Primary" Size="Size.Small" StartIcon="fas fa-cross" OnClick="() => _shamsiVisible=!_shamsiVisible" />
            </div>
            <div style="display: @(_shamsiVisible? "block":"none")">
                <MudButton Color="Color.Primary" Size="Size.Small" StartIcon="fas fa-sun" OnClick="() => _shamsiVisible=!_shamsiVisible" />
            </div>
        </div>
    </div>
</MudContainer>

@code
{
    private DateTime? _date;

    [Parameter]
    public DateTime? Date
    {
        get => _date!;
        set
        {
            if (value == null || _date == value) return;
            _date = value;
            DateChanged.InvokeAsync(value);
            DateNotNullChanged.InvokeAsync(value.Value);
        }
    }
    
    [Parameter]
    public EventCallback<DateTime?> DateChanged { get; set; }

    [Parameter]
    public DateTime DateNotNull
    {
        get => _date.GetValueOrDefault(DateTime.Today);
        set
        {
            if (_date == value || value == DateTime.MinValue) return;
            Date = value;
            DateNotNullChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<DateTime> DateNotNullChanged { get; set; }

    [Parameter] public string? NullText { get; set; }

    [Parameter] public string? DisplayText { get; set; }
    [Parameter] public CalendarType DefaultCalendar { get; set; }

    [Parameter] public Variant CalenderVariant { get; set; }

    public enum CalendarType
    {
        Shamsi, Miladi
    }

    private bool _shamsiVisible;

    protected override void OnInitialized()
    {
        _shamsiVisible = DefaultCalendar == CalendarType.Shamsi;
    }

    private CultureInfo GetPersianCulture()
    {
        var culture = new CultureInfo("fa-IR");
        var formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { "ی", "د", "س", "چ", "پ", "ج", "ش" };
        formatInfo.DayNames = new[] { "یکشنبه", "دوشنبه", "سه شنبه", "چهار شنبه", "پنجشنبه", "جمعه", "شنبه" };
        var monthNames = new[]
        {
            "فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن",
            "اسفند",
            "",
    };
        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = "ق.ظ";
        formatInfo.PMDesignator = "ب.ظ";
        formatInfo.ShortDatePattern = "yyyy/MM/dd";
        formatInfo.LongDatePattern = "dddd, dd MMMM,yyyy";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        Calendar cal = new PersianCalendar();
        var fieldInfo = culture.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        var info = formatInfo.GetType().GetField("calendar", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = "/";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }
}