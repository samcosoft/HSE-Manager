@using Samco_HSE_Manager.Authentication
@inject IStringLocalizer<Resource> L

<MudAppBar Color="Color.Dark" Fixed="true" Elevation="3">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="OnToggleClick" />
    <MudSpacer />
    <img class="ms-auto" src="images/logo.svg" alt="logo" height="40">
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <MudText Typo="Typo.h6">@L["ApplicationTitle"]</MudText>
    </MudHidden>
    <MudSpacer />
    <CulturePicker/>
    <MudToggleIconButton @bind-Toggled="@DarkMode" Variant="Variant.Filled" Class="mx-3"
                         Icon="@Icons.Material.Filled.DarkMode" ToggledIcon="@Icons.Material.Filled.LightMode"
                         Color="Color.Secondary" ToggledColor="Color.Secondary" />
    <AuthorizeView>
        <Authorized>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="LogOut_Click">@L["LogOut"]</MudButton>
        </Authorized>
        @* <NotAuthorized>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LogIn_Click">ورود به سیستم</MudButton>
        </NotAuthorized> *@
    </AuthorizeView>
</MudAppBar>

@code {
    
    [Parameter]
    public bool DarkMode
    {
        get => _darkMode;
        set
        {
            if (_darkMode == value) return;
            _darkMode = value;
            DarkModeChanged.InvokeAsync(_darkMode);
        }
    }

    [Parameter]
    public bool ToggleOn { get; set; }

    [Parameter]
    public EventCallback<bool> ToggleOnChanged { get; set; }

    [Parameter]
    public EventCallback<bool> DarkModeChanged { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    private bool _darkMode;

    private async Task OnToggleClick() => await Toggle();

    private async Task Toggle(bool? value = null)
    {
        var newValue = value ?? !ToggleOn;
        if (ToggleOn != newValue)
        {
            ToggleOn = newValue;
            await ToggleOnChanged.InvokeAsync(ToggleOn);
        }
    }

    private async Task LogOut_Click()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
    }

    // private void LogIn_Click()
    // {
    //     NavigationManager.NavigateTo("login");
    // }

}