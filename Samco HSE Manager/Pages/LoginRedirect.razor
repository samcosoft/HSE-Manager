@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<Resource> L

<MudAlert Variant="Variant.Filled" Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Right">@L["AccessDenied"]</MudAlert>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationStateTask;
        if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            try
            {
                await Task.Delay(1000);
                // NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(returnUrl) ? "/login" : $"/login?ReturnUrl={returnUrl}");
                await JsRuntime.InvokeVoidAsync("redirectToLogin", returnUrl);
            }
            catch (NavigationException e)
            {
                Console.WriteLine(e);
            }
        }
    }
}