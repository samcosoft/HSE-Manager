@using System.IO
@using Syncfusion.Blazor.Inputs
@using FileInfo = System.IO.FileInfo

<SfUploader AutoUpload="true" AllowMultiple="@AllowMultiple" SequentialUpload="true" MaxFileSize="5242880"
            AllowedExtensions="@_allowedExtensions">
    <UploaderFiles @ref="_uploader" />
    <UploaderEvents BeforeUpload="@BeforeStart" ValueChange="OnChange" OnRemove="OnRemove" />
</SfUploader>

@code {
    [Parameter]
    public SamcoSoftShared.UploadFolders SavePath { get; set; }

    [Parameter]
    public string? DataId { get; set; }

    [Parameter]
    public bool DoNotCreateDirectory { get; set; }

    [Parameter]
    public bool AllowMultiple { get; set; }

    [Parameter]
    public AllowedFileExtensions AllowedExtension { get; set; }

    [Parameter]
    public EventCallback<BeforeUploadEventArgs> BeforeStart { get; set; }

    [Inject]
    IWebHostEnvironment HostEnvironment { get; set; } = null!;

    //File list = file info, filepath
    public Dictionary<string, string> FileList { get; set; } = [];

    private string _rootPath = null!;
    private string _allowedExtensions = null!;
    private UploaderFiles? _uploader;

    public enum AllowedFileExtensions
    {
        ImagesOnly,
        DocumentsOnly,
        DocumentsAndImages,
        AllFiles
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _rootPath = SavePath switch
        {
            SamcoSoftShared.UploadFolders.StopCards => Path.Combine(HostEnvironment.WebRootPath, "upload", "STOPCards"),
            SamcoSoftShared.UploadFolders.Medical => Path.Combine(HostEnvironment.WebRootPath, "upload", "MedicalDocuments"),
            SamcoSoftShared.UploadFolders.Forms => Path.Combine(HostEnvironment.ContentRootPath, "Data", "Forms"),
            _ => throw new ArgumentOutOfRangeException()
        };
        _allowedExtensions = AllowedExtension switch
        {
            AllowedFileExtensions.ImagesOnly => ".jpg,.jpeg,.png",
            AllowedFileExtensions.DocumentsOnly => ".doc,.docx,.xls,.xlsx,.pdf",
            AllowedFileExtensions.DocumentsAndImages => ".jpg,.jpeg,.png,.doc,.docx,.xls,.xlsx,.pdf,.ppt,.pptx",
            AllowedFileExtensions.AllFiles => "",
            _ => throw new ArgumentOutOfRangeException()
        };
        if (!Directory.Exists(_rootPath))
            Directory.CreateDirectory(_rootPath);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            //Check for previous files
            var fileList = DoNotCreateDirectory ? Directory.GetFiles(_rootPath, $"{DataId}.*") : Directory.GetFiles(Path.Combine(_rootPath, DataId!), "*.*");
            foreach (var file in fileList)
            {
                var fileInfo = new UploaderUploadedFiles
                    {
                        Name = Path.GetFileNameWithoutExtension(file),
                        Size = new FileInfo(file).Length,
                        Type = new FileInfo(file).Extension
                    };
                _uploader?.Files.Add(fileInfo);
                FileList.Add(fileInfo.Name + fileInfo.Type, file);
            }
        }
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            if (DoNotCreateDirectory)
            {
                foreach (var file in args.Files)
                {
                    var path = Path.Combine(_rootPath, DataId! + "." + file.FileInfo.Type);
                    var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write);
                    await file.File.OpenReadStream(5242880).CopyToAsync(fileStream);
                    fileStream.Close();
                    FileList.Add(file.FileInfo.Name, path);
                }
            }
            else
            {
                var filePath = Path.Combine(_rootPath, DataId!);
                if (!Directory.Exists(filePath))
                    Directory.CreateDirectory(filePath);

                foreach (var file in args.Files)
                {
                    var path = Path.Combine(filePath, file.FileInfo.Name);
                    var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write);
                    await file.File.OpenReadStream(5242880).CopyToAsync(fileStream);
                    fileStream.Close();
                    FileList.Add(file.FileInfo.Name, path);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private void OnRemove(RemovingEventArgs args)
    {
        try
        {
            foreach (var itm in args.FilesData.Where(x => File.Exists(FileList[x.Name])))
            {
                File.Delete(FileList[itm.Name]);
            }

            foreach (var itm in args.FilesData)
            {
                FileList.Remove(itm.Name);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}