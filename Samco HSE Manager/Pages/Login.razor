@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using DevExpress.Data.Filtering
@using Samco_HSE.HSEData
@using Samco_HSE_Manager.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ITokenManager TokenManager
@inject IDataLayer DataLayer

<PageTitle>ورود به ناحیه کاربری</PageTitle>

<MudGrid>
    <MudItem md="3" sm="1" />
    <MudItem md="6" sm="10">
        <EditForm Model="_loginData" OnValidSubmit="@LoginUser">
            <MudCard Class="animate__animated animate__headShake" Outlined="true">
                <MudCardHeader Style="@($"background-color:{Colors.BlueGray.Lighten5};")">
                    <img src="images/logo.svg" alt="Samco HSE" class="mx-auto" style="width: 30%" />
                </MudCardHeader>
                <MudCardContent>
                    <MudTabs @bind-ActivePanelIndex="@_activePanel">
                        <MudTabPanel Text="ورود کارمندان">
                            <div>
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                            </div>
                            <MudTextField @bind-Value="_loginData.Username" Label="نام کاربری" Class="mt-6" />
                            <MudTextField @bind-Value="_loginData.Password" Label="کلمه عبور" InputType="InputType.Password" />
                            @{
                                if (Configuration["IsDemo"] == "true")
                                {
                                    <MudAlert Severity="Severity.Info" Elevation="4" Icon="fas fa-info">
                                        <p>در حالت آزمایشی نام کاربری و کلمه عبور مدیر سیستم admin است.</p>
                                    </MudAlert>
                                }
                            }
                        </MudTabPanel>
                        <MudTabPanel Text="ورود کارکنان">
                            <div>
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                            </div>
                            <MudTextField @bind-Value="_loginData.Username" Label="کد ملی" Class="mt-6" />
                            <MudTextField @bind-Value="_loginData.Password" Label="شماره پرسنلی" InputType="InputType.Password" />
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
                <MudCardActions>
                    <div class="col-12 row animate__animated animate__headShake" style="text-align: center; font-weight: bold">
                        <span class="col-12">@LoginMessage</span>
                    </div>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto">ورود به سیستم</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudItem>
    <MudItem md="3" sm="1" />
</MudGrid>


@code {
    private readonly LoginModel _loginData = new();
    private string? LoginMessage { get; set; }
    private int _activePanel;

    ClaimsPrincipal? _claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _claimsPrincipal = (await AuthenticationStateTask).User;

        if (_claimsPrincipal.Identity is { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("");
        }
    }

    private void LoginUser()
    {
        if (_activePanel == 0)
        {
            ValidateUser();
        }
        else
        {
            ValidatePersonnel();
        }
    }

    private async void ValidateUser()
    {
        if (TokenManager.Authenticate(_loginData.Username, _loginData.Password, DataLayer, out var token, out _, out var errorMessage))
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);

            try
            {
                using var session1 = new Session(DataLayer);
                var authStat = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                if (authStat.User.Identity == null) return;
                SamcoSoftShared.CurrentUser = await session1.FindObjectAsync<User>(new BinaryOperator("Username",
                    authStat.User.Identity!.Name));
                if (SamcoSoftShared.CurrentUser != null)
                {
                    SamcoSoftShared.CurrentUserRole = Enum.Parse<SamcoSoftShared.SiteRoles>(SamcoSoftShared.CurrentUser.SiteRole);
                    SamcoSoftShared.CurrentUserId = SamcoSoftShared.CurrentUser.Oid;
                }
            }
            catch (Exception)
            {
                return;
            }

            NavigationManager.NavigateTo("", true);
        }
        else
        {
            LoginMessage = errorMessage;
        }
    }

    private async void ValidatePersonnel()
    {
        using var session1 = new Session(DataLayer);
        var selUser = await session1.FindObjectAsync<Samco_HSE.HSEData.Personnel>(new BinaryOperator(nameof(Samco_HSE.HSEData.Personnel.NationalID), _loginData.Username));
        try
        {
            if (selUser != null && _loginData.Password == selUser.PersonnelNum)
            {
                //Login user
                TokenManager.Authenticate(selUser, DataLayer, out var token, out _, out _);
                await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);
                SamcoSoftShared.CurrentUserId = selUser.Oid;
                SamcoSoftShared.CurrentUserRole = SamcoSoftShared.SiteRoles.Personnel;
            }
            else
            {
                LoginMessage = "نام کاربری و یا کلمه عبور اشتباه است.";
                return;
            }
        }
        catch (Exception)
        {
            //_loggedUser = new User(session1);
            return;
        }

        NavigationManager.NavigateTo("/personnelHome", true);
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "نام کاربری الزامی است."), StringLength(10, MinimumLength = 5)]
        public string? Username { get; set; }

        [Required(ErrorMessage = "کلمه عبور الزامی است.")]
        public string? Password { get; set; }
    }

}